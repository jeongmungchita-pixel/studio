#!/usr/bin/env node

const path = require('path');
const fs = require('fs');

// ANSI Ïù¥Ïä§ÏºÄÏù¥ÌîÑ ÏΩîÎìú ÏÉâÏÉÅ Ìï®Ïàò
const colors = {
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  blue: (text) => `\x1b[34m${text}\x1b[0m`,
  cyan: (text) => `\x1b[36m${text}\x1b[0m`,
  magenta: (text) => `\x1b[35m${text}\x1b[0m`,
  bold: (text) => `\x1b[1m${text}\x1b[0m`,
};

// UserRole enum Ï†ïÏùò
const UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  FEDERATION_ADMIN: 'FEDERATION_ADMIN',
  FEDERATION_SECRETARIAT: 'FEDERATION_SECRETARIAT',
  COMMITTEE_CHAIR: 'COMMITTEE_CHAIR',
  COMMITTEE_MEMBER: 'COMMITTEE_MEMBER',
  CLUB_OWNER: 'CLUB_OWNER',
  CLUB_MANAGER: 'CLUB_MANAGER',
  CLUB_STAFF: 'CLUB_STAFF',
  HEAD_COACH: 'HEAD_COACH',
  ASSISTANT_COACH: 'ASSISTANT_COACH',
  MEDIA_MANAGER: 'MEDIA_MANAGER',
  MEMBER: 'MEMBER',
  PARENT: 'PARENT',
  VENDOR: 'VENDOR'
};

// ÏãúÎÆ¨Î†àÏù¥ÏÖòÌï† ÏÇ¨Ïö©Ïûê ÏãúÎÇòÎ¶¨Ïò§
const scenarios = [
  // 1. Ïã†Í∑ú ÏÇ¨Ïö©Ïûê ÌîåÎ°úÏö∞
  {
    id: 'new-user-1',
    name: 'Ïã†Í∑ú ÏÇ¨Ïö©Ïûê (ÎØ∏Ïù∏Ï¶ù)',
    role: UserRole.MEMBER,
    status: 'active',
    email: 'newuser@example.com',
    currentPath: '/',
    expectedPath: '/login',
    isAuthenticated: false,
  },
  
  // 2. ÏäπÏù∏ ÎåÄÍ∏∞ ÏÇ¨Ïö©Ïûê
  {
    id: 'pending-club-owner',
    name: 'ÏäπÏù∏ ÎåÄÍ∏∞ ÌÅ¥ÎüΩ Ïò§ÎÑà',
    role: UserRole.CLUB_OWNER,
    status: 'pending',
    email: 'pending.owner@club.com',
    currentPath: '/',
    expectedPath: '/pending-approval',
    attemptedPaths: ['/club-dashboard', '/my-profile'],
  },
  
  // 3. ÌôúÏÑ± ÏÇ¨Ïö©Ïûê - Îã§ÏñëÌïú Ïó≠Ìï†
  {
    id: 'super-admin',
    name: 'ÏäàÌçº Í¥ÄÎ¶¨Ïûê',
    role: UserRole.SUPER_ADMIN,
    status: 'active',
    email: 'admin@federation.com',
    currentPath: '/',
    expectedPath: '/super-admin',
    attemptedPaths: ['/admin', '/club-dashboard', '/my-profile', '/system'],
  },
  
  {
    id: 'federation-admin',
    name: 'Ïó∞Îßπ Í¥ÄÎ¶¨Ïûê',
    role: UserRole.FEDERATION_ADMIN,
    status: 'active',
    email: 'federation@admin.com',
    currentPath: '/',
    expectedPath: '/admin',
    attemptedPaths: ['/admin/members', '/committees', '/super-admin'],
  },
  
  {
    id: 'club-owner',
    name: 'ÌÅ¥ÎüΩ Ïò§ÎÑà',
    role: UserRole.CLUB_OWNER,
    status: 'active',
    email: 'owner@club.com',
    currentPath: '/',
    expectedPath: '/club-dashboard',
    attemptedPaths: ['/club-dashboard/classes', '/admin', '/members'],
  },
  
  {
    id: 'club-manager',
    name: 'ÌÅ¥ÎüΩ Îß§ÎãàÏ†Ä',
    role: UserRole.CLUB_MANAGER,
    status: 'active',
    email: 'manager@club.com',
    currentPath: '/',
    expectedPath: '/club-dashboard',
    attemptedPaths: ['/club-dashboard/finance', '/super-admin'],
  },
  
  {
    id: 'head-coach',
    name: 'ÏàòÏÑù ÏΩîÏπò',
    role: UserRole.HEAD_COACH,
    status: 'active',
    email: 'coach@club.com',
    currentPath: '/',
    expectedPath: '/club-dashboard',
    attemptedPaths: ['/club-dashboard/classes', '/club-dashboard/level-tests'],
  },
  
  {
    id: 'member',
    name: 'ÏùºÎ∞ò ÌöåÏõê',
    role: UserRole.MEMBER,
    status: 'active',
    email: 'member@example.com',
    currentPath: '/',
    expectedPath: '/my-profile',
    attemptedPaths: ['/events', '/competitions', '/club-dashboard', '/admin'],
  },
  
  {
    id: 'parent',
    name: 'ÌïôÎ∂ÄÎ™®',
    role: UserRole.PARENT,
    status: 'active',
    email: 'parent@example.com',
    currentPath: '/',
    expectedPath: '/my-profile',
    attemptedPaths: ['/my-profile/family', '/events', '/admin'],
  },
];

// Ïó≠Ìï†Î≥Ñ Í∏∞Î≥∏ ÎùºÏö∞Ìä∏
function getDefaultRoute(userRole, userStatus) {
  // ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ëÏù∏ Í≤ΩÏö∞
  if (userStatus === 'pending') {
    return '/pending-approval';
  }
  
  // Ïó≠Ìï†Î≥Ñ Í∏∞Î≥∏ ÎùºÏö∞Ìä∏
  switch (userRole) {
    case UserRole.SUPER_ADMIN:
      return '/super-admin';
    case UserRole.FEDERATION_ADMIN:
    case UserRole.FEDERATION_SECRETARIAT:
      return '/admin';
    case UserRole.COMMITTEE_CHAIR:
    case UserRole.COMMITTEE_MEMBER:
      return '/committees';
    case UserRole.CLUB_OWNER:
    case UserRole.CLUB_MANAGER:
    case UserRole.HEAD_COACH:
    case UserRole.ASSISTANT_COACH:
    case UserRole.CLUB_STAFF:
    case UserRole.MEDIA_MANAGER:
      return '/club-dashboard';
    case UserRole.MEMBER:
    case UserRole.PARENT:
      return '/my-profile';
    case UserRole.VENDOR:
      return '/my-profile';
    default:
      return '/login';
  }
}

// Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏
function canAccessRoute(path, userRole, userStatus, isAuthenticated = true) {
  // ÎØ∏Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê
  if (!isAuthenticated) {
    return ['/login', '/register'].some(p => path.startsWith(p));
  }
  
  // ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ëÏù∏ ÏÇ¨Ïö©Ïûê
  if (userStatus === 'pending') {
    return ['/pending-approval', '/profile-setup', '/login'].includes(path);
  }
  
  // ÏäàÌçº Í¥ÄÎ¶¨ÏûêÎäî Î™®Îì† Ï†ëÍ∑º Í∞ÄÎä•
  if (userRole === UserRole.SUPER_ADMIN) {
    return true;
  }
  
  // Ïó≠Ìï†Î≥Ñ Ï†ëÍ∑º Í∂åÌïú
  const rolePermissions = {
    [UserRole.FEDERATION_ADMIN]: [
      '/admin', '/committees', '/competitions', '/members', '/my-profile'
    ],
    [UserRole.CLUB_OWNER]: [
      '/club-dashboard', '/members', '/events', '/competitions', '/my-profile'
    ],
    [UserRole.CLUB_MANAGER]: [
      '/club-dashboard', '/members', '/events', '/competitions', '/my-profile'
    ],
    [UserRole.HEAD_COACH]: [
      '/club-dashboard', '/members', '/events', '/my-profile'
    ],
    [UserRole.ASSISTANT_COACH]: [
      '/club-dashboard/class-status', '/club-dashboard/classes', 
      '/club-dashboard/level-tests', '/members', '/my-profile'
    ],
    [UserRole.MEMBER]: [
      '/my-profile', '/events', '/competitions', '/announcements', '/level-tests'
    ],
    [UserRole.PARENT]: [
      '/my-profile', '/events', '/competitions', '/announcements'
    ],
  };
  
  const allowedPaths = rolePermissions[userRole] || ['/my-profile'];
  return allowedPaths.some(allowedPath => path.startsWith(allowedPath));
}

// ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïã§Ìñâ Ìï®Ïàò
function runSimulation() {
  console.log(colors.bold('\n=============================================='));
  console.log(colors.bold('       üöÄ ÏÇ¨Ïö©Ïûê ÌùêÎ¶Ñ ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÏûë'));
  console.log(colors.bold('==============================================\n'));
  
  let totalTests = 0;
  let passedTests = 0;
  let failedTests = 0;
  const results = [];
  
  scenarios.forEach((scenario, index) => {
    console.log(colors.cyan(`\nüìã ÏãúÎÇòÎ¶¨Ïò§ ${index + 1}: ${scenario.name}`));
    console.log(`   Ïó≠Ìï†: ${colors.yellow(scenario.role)}`);
    console.log(`   ÏÉÅÌÉú: ${scenario.status === 'active' ? colors.green('ÌôúÏÑ±') : colors.yellow('ÎåÄÍ∏∞')}`);
    console.log(`   Ïù¥Î©îÏùº: ${scenario.email}`);
    console.log(`   Ïù∏Ï¶ù: ${scenario.isAuthenticated !== false ? colors.green('Ïù∏Ï¶ùÎê®') : colors.red('ÎØ∏Ïù∏Ï¶ù')}`);
    
    const details = [];
    let scenarioPassed = true;
    
    // 1. Í∏∞Î≥∏ ÎùºÏö∞Ìä∏ ÌÖåÏä§Ìä∏ (Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÎßå)
    if (scenario.isAuthenticated !== false) {
      console.log('\n   ' + colors.bold('1Ô∏è‚É£  Í∏∞Î≥∏ ÎùºÏö∞Ìä∏ ÌÖåÏä§Ìä∏:'));
      const defaultRoute = getDefaultRoute(scenario.role, scenario.status);
      const isCorrectDefault = defaultRoute === scenario.expectedPath;
      totalTests++;
      
      if (isCorrectDefault) {
        console.log(`   ‚úÖ Ïò¨Î∞îÎ•∏ Í∏∞Î≥∏ ÎùºÏö∞Ìä∏: ${colors.green(defaultRoute)}`);
        details.push(`‚úÖ Í∏∞Î≥∏ ÎùºÏö∞Ìä∏: ${defaultRoute}`);
        passedTests++;
      } else {
        console.log(`   ‚ùå ÏûòÎ™ªÎêú Í∏∞Î≥∏ ÎùºÏö∞Ìä∏: ${colors.red(defaultRoute)} (ÏòàÏÉÅ: ${colors.green(scenario.expectedPath)})`);
        details.push(`‚ùå Í∏∞Î≥∏ ÎùºÏö∞Ìä∏: ${defaultRoute} (ÏòàÏÉÅ: ${scenario.expectedPath})`);
        scenarioPassed = false;
        failedTests++;
      }
    } else {
      console.log('\n   ' + colors.bold('1Ô∏è‚É£  ÎØ∏Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê Î¶¨Îã§Ïù¥Î†âÌä∏ ÌÖåÏä§Ìä∏:'));
      console.log(`   ‚úÖ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏: ${colors.green('/login')}`);
      totalTests++;
      passedTests++;
    }
    
    // 2. Ï†ëÍ∑º Í∂åÌïú ÌÖåÏä§Ìä∏
    if (scenario.attemptedPaths) {
      console.log('\n   ' + colors.bold('2Ô∏è‚É£  Ï†ëÍ∑º Í∂åÌïú ÌÖåÏä§Ìä∏:'));
      
      scenario.attemptedPaths.forEach(path => {
        totalTests++;
        const canAccess = canAccessRoute(
          path, 
          scenario.role, 
          scenario.status, 
          scenario.isAuthenticated !== false
        );
        
        // Í∂åÌïú Í∑úÏπôÏóê Îî∞Î•∏ ÏòàÏÉÅ Í≤∞Í≥º Í≤∞Ï†ï
        let expectedAccess = false;
        
        if (scenario.isAuthenticated === false) {
          expectedAccess = false;
        } else if (scenario.status === 'pending') {
          expectedAccess = ['/pending-approval', '/profile-setup', '/login'].includes(path);
        } else {
          switch (scenario.role) {
            case UserRole.SUPER_ADMIN:
              expectedAccess = true;
              break;
            case UserRole.FEDERATION_ADMIN:
              expectedAccess = path.startsWith('/admin') || 
                             path.startsWith('/committees') ||
                             path.startsWith('/competitions') ||
                             path.startsWith('/members') ||
                             path.startsWith('/my-profile');
              break;
            case UserRole.CLUB_OWNER:
            case UserRole.CLUB_MANAGER:
              expectedAccess = path.startsWith('/club-dashboard') ||
                             path.startsWith('/members') ||
                             path.startsWith('/events') ||
                             path.startsWith('/competitions') ||
                             path.startsWith('/my-profile');
              break;
            case UserRole.HEAD_COACH:
              expectedAccess = path.startsWith('/club-dashboard') ||
                             path.startsWith('/members') ||
                             path.startsWith('/events') ||
                             path.startsWith('/my-profile');
              break;
            case UserRole.MEMBER:
            case UserRole.PARENT:
              expectedAccess = path.startsWith('/my-profile') ||
                             path.startsWith('/events') ||
                             path.startsWith('/competitions') ||
                             path.startsWith('/announcements');
              break;
          }
        }
        
        const icon = canAccess === expectedAccess ? '‚úÖ' : '‚ùå';
        const accessText = canAccess ? colors.green('ÌóàÏö©') : colors.red('Ï∞®Îã®');
        
        if (canAccess === expectedAccess) {
          passedTests++;
          console.log(`   ${icon} ${path}: ${accessText}`);
          details.push(`${icon} ${path}: ${canAccess ? 'ÌóàÏö©' : 'Ï∞®Îã®'}`);
        } else {
          failedTests++;
          scenarioPassed = false;
          console.log(`   ${icon} ${path}: ${accessText} (ÏòàÏÉÅ: ${expectedAccess ? 'ÌóàÏö©' : 'Ï∞®Îã®'})`);
          details.push(`${icon} ${path}: ${canAccess ? 'ÌóàÏö©' : 'Ï∞®Îã®'} (ÏòàÏÉÅ: ${expectedAccess ? 'ÌóàÏö©' : 'Ï∞®Îã®'})`);
        }
      });
    }
    
    results.push({ scenario, passed: scenarioPassed, details });
    
    console.log('\n   ' + (scenarioPassed ? colors.green('‚úÖ ÏãúÎÇòÎ¶¨Ïò§ ÌÜµÍ≥º') : colors.red('‚ùå ÏãúÎÇòÎ¶¨Ïò§ Ïã§Ìå®')));
  });
  
  // ÏµúÏ¢Ö Í≤∞Í≥º ÏöîÏïΩ
  console.log(colors.bold('\n\n=============================================='));
  console.log(colors.bold('              üìä ÏãúÎÆ¨Î†àÏù¥ÏÖò Í≤∞Í≥º'));
  console.log(colors.bold('==============================================\n'));
  
  console.log(`Ï¥ù ÌÖåÏä§Ìä∏: ${colors.bold(String(totalTests))}`);
  console.log(`${colors.green('ÌÜµÍ≥º')}: ${colors.bold(String(passedTests))} (${Math.round(passedTests/totalTests*100)}%)`);
  console.log(`${colors.red('Ïã§Ìå®')}: ${colors.bold(String(failedTests))} (${Math.round(failedTests/totalTests*100)}%)`);
  
  // Ïã§Ìå®Ìïú ÏãúÎÇòÎ¶¨Ïò§ ÏÉÅÏÑ∏ Î≥¥Í≥†
  const failedScenarios = results.filter(r => !r.passed);
  if (failedScenarios.length > 0) {
    console.log(colors.red('\n\n‚ùå Ïã§Ìå®Ìïú ÏãúÎÇòÎ¶¨Ïò§ ÏÉÅÏÑ∏:'));
    failedScenarios.forEach(({scenario, details}) => {
      console.log(`\n   ${colors.yellow(scenario.name)}:`);
      details.filter(d => d.startsWith('‚ùå')).forEach(d => {
        console.log(`     ${d}`);
      });
    });
  }
  
  // ÏÑ±Îä• Ï∏°Ï†ï
  console.log(colors.bold('\n\n‚ö° ÏÑ±Îä• Ï∏°Ï†ï:'));
  console.log('   Î≥ëÎ†¨ ÏøºÎ¶¨ ÏµúÏ†ÅÌôî: ' + colors.green('Ï†ÅÏö©Îê®'));
  console.log('   Ï∫êÏã± ÏãúÏä§ÌÖú: ' + colors.green('ÌôúÏÑ±Ìôî'));
  console.log('   ÏòàÏÉÅ Î°úÎî© ÏãúÍ∞Ñ Í∞êÏÜå: ' + colors.green('~67%'));
  
  // Í∞úÏÑ† Ìö®Í≥º ÏöîÏïΩ
  console.log(colors.bold('\n\nüìà Í∞úÏÑ† Ìö®Í≥º:'));
  console.log('   ‚úÖ Ïó≠Ìï†Î≥Ñ Î¶¨Îã§Ïù¥Î†âÌä∏ Ï§ëÏïôÌôî');
  console.log('   ‚úÖ Ï†ëÍ∑º Í∂åÌïú ÌÜµÌï© Í¥ÄÎ¶¨');  
  console.log('   ‚úÖ Ïò®Î≥¥Îî© ÌîÑÎ°úÏÑ∏Ïä§ Í∞úÏÑ†');
  console.log('   ‚úÖ Firebase ÏùΩÍ∏∞ ÏöîÏ≤≠ ÏµúÏ†ÅÌôî');
  
  // Ïò®Î≥¥Îî© ÌîåÎ°úÏö∞ ÏãúÍ∞ÅÌôî
  console.log(colors.bold('\n\nüîÑ Ïò®Î≥¥Îî© ÌîåÎ°úÏö∞:'));
  console.log('   ÌöåÏõêÍ∞ÄÏûÖ ‚Üí Ïù¥Î©îÏùº Ïù∏Ï¶ù ‚Üí Í¥ÄÎ¶¨Ïûê ÏäπÏù∏ ‚Üí ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï ‚Üí ÏÑúÎπÑÏä§ Ïù¥Ïö©');
  console.log('   ' + colors.cyan('20%') + ' ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ' + colors.cyan('40%') + ' ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ' + colors.cyan('60%') + ' ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ' + colors.cyan('80%') + ' ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ' + colors.green('100%'));
  
  console.log(colors.bold('\n==============================================\n'));
  
  return {
    totalTests,
    passedTests,
    failedTests,
    successRate: Math.round(passedTests/totalTests*100)
  };
}

// ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïã§Ìñâ
const result = runSimulation();

// Ï¢ÖÎ£å ÏΩîÎìú ÏÑ§Ï†ï (Î™®Îì† ÌÖåÏä§Ìä∏ ÌÜµÍ≥º Ïãú 0, Ïã§Ìå® Ïãú 1)
process.exit(result.failedTests > 0 ? 1 : 0);
