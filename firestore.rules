/**
 * @fileoverview Firestore Security Rules for Korean Gymnastics Federation App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and nested member data.
 * It allows broader access to top-level collections like clubs and competitions.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /clubs/{clubId}: Stores club information. Public read access, owner-only writes are intended.
 * - /clubs/{clubId}/members/{memberId}: Stores member information nested under clubs. Owner-only writes are intended.
 * - /competitions/{competitionId}: Stores competition information. Public read access, owner-only writes are intended.
 * - /level_tests/{levelTestId}: Stores level test information. Public read access, owner-only writes are intended.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed.
 * - Public read access is granted to clubs, competitions and level_tests. Writes should be restricted, but an ownerId is missing.
 *
 * Denormalization for Authorization:
 *  - The current data model does not include any denormalized data for authorization. If owner-only access for clubs, competitions, or level_tests is needed, an `ownerId` field must be added to their schema.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with ID 'userId' creates their own profile.
     * @allow (get) User with ID 'userId' reads their own profile.
     * @allow (update) User with ID 'userId' updates their own profile.
     * @allow (delete) User with ID 'userId' deletes their own profile.
     * @deny (create) User with ID 'anotherUserId' attempts to create profile with ID 'userId'.
     * @deny (get) User with ID 'anotherUserId' attempts to read profile with ID 'userId'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allow the user to read their own profile
      allow get: if isSignedIn() && isOwner(userId);
      // Prevent listing of all users
      allow list: if false;
      // Allow a user to create their own profile if the UID matches
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      // Allow a user to update their own profile
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      // Allow a user to delete their own profile
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to club documents. Intended for public read and owner-only writes.
     * @path /databases/{database}/documents/clubs/{clubId}
     * @allow (get) Any user can read club information.
     * @allow (list) Any user can list club information.
     * @deny (create) No one can create club, as owner id validation is missing
     * @deny (update) No one can update club, as owner id validation is missing
     * @principle Intended for public read access but owner only writes is missing 'ownerId'.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to member documents within a club.
     * @path /databases/{database}/documents/clubs/{clubId}/members/{memberId}
     * @allow (create) If you are the club owner you can create a member
     * @allow (get) If you are the club owner you can get a member
     * @allow (update) If you are the club owner you can update a member
     * @allow (delete) If you are the club owner you can delete a member
     * @deny (create) If you are not the club owner you cannot create a member
     * @deny (get) If you are not the club owner you cannot get a member
     * @principle Enforces that a user must be the owner to modify a member
     */
    match /clubs/{clubId}/members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Controls access to competitions documents. Intended for public read and owner-only writes.
      * @path /databases/{database}/documents/competitions/{competitionId}
      * @allow (get) Any user can read competition information.
      * @allow (list) Any user can list competition information.
      * @deny (create) No one can create competition, as owner id validation is missing
      * @deny (update) No one can update competition, as owner id validation is missing
      * @principle Intended for public read access but owner only writes is missing 'ownerId'.
      */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to level tests documents. Intended for public read and owner-only writes.
     * @path /databases/{database}/documents/level_tests/{levelTestId}
     * @allow (get) Any user can read level test information.
     * @allow (list) Any user can list level test information.
     * @deny (create) No one can create level test, as owner id validation is missing
     * @deny (update) No one can update level test, as owner id validation is missing
     * @principle Intended for public read access but owner only writes is missing 'ownerId'.
     */
    match /level_tests/{levelTestId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the resource, and the resource exists
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}